---
- name: Kubernetes master installation
  hosts: all # value here is important!
  become: yes
  become_user: root
  become_method: sudo

  tasks:
    - name: set hostname of k8s-master
      shell: hostnamectl set-hostname {{ lookup('env', 'HOSTNAME') }}

    - name: exec bash
      shell: exec bash

    - name: setenforce 0
      shell: setenforce 0

    - name: disable selinux
      shell: sed -i --follow-symlinks 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/sysconfig/selinux

    - name: set firewall rule
      shell: firewall-cmd --permanent --add-port=6443/tcp

    - name: set firewall rule
      shell: firewall-cmd --permanent --add-port=2379-2380/tcp

    - name: set firewall rule
      shell: firewall-cmd --permanent --add-port=10250/tcp

    - name: set firewall rule
      shell: firewall-cmd --permanent --add-port=10251/tcp

    - name: set firewall rule
      shell: firewall-cmd --permanent --add-port=10252/tcp

    - name: set firewall rule
      shell: firewall-cmd --permanent --add-port=10255/tcp

    - name: reload firewall rule
      shell: firewall-cmd --reload

    - name: modprobe br_netfilter
      shell: modprobe br_netfilter

    - name: echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables
      shell: echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables

    - name: add k8s to yum reo
      shell:
        cmd: |
            cat <<EOF > /etc/yum.repos.d/kubernetes.repo
            [kubernetes]
            name=Kubernetes
            baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
            enabled=1
            gpgcheck=1
            repo_gpgcheck=1
            gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
            EOF

    - name: install docker
      shell: yum install docker -y

    - name: restart docker
      shell: systemctl restart docker

    - name: enable docker
      shell: systemctl enable docker

    - name: install kubeadm
      shell: yum install kubeadm -y

    - name: install kubectl
      shell: yum install kubectl -y

    - name: install kubelet
      shell: yum install kubelet -y

    - name: restart kubelet
      shell: systemctl restart kubelet

    - name: enable kubelet
      shell: systemctl enable kubelet

    - name: initialize k8s
      shell: kubeadm init

    - name: create .kube file
      shell: mkdir -p $HOME/.kube

    - name: copy /etc/kubernetes/admin.conf to $HOME/.kube/config
      shell: cp -i /etc/kubernetes/admin.conf $HOME/.kube/config

    - name: chown $(id -u):$(id -g) $HOME/.kube/config
      shell: chown $(id -u):$(id -g) $HOME/.kube/config

    - name: set kube version as environment variable
      shell: kubectl version | base64 | tr -d '\n'
      register: kube_ver

    - name: deploy network
      shell: kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version={{kube_ver.stdout}}"

    - name: record ip address of k8s-master
      shell: echo {{ lookup('env', 'PUBLIC_IP') }}
      register: K8S_MASTER_IP

    - name: record k8s token
      shell: kubeadm token list | cut -d ' ' -f1 | sed -n '2p'
      register: K8S_TOKEN

    - name: record k8s hash
      shell: openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'
      register: K8S_MASTER_CA_HASH

    - name: add variables to dummy host
      add_host:
        name: "K8S_TOKEN_HOLDER"
        token: "{{ K8S_TOKEN.stdout }}"
        hash: "{{ K8S_MASTER_CA_HASH.stdout }}"
        master_ip: "{{ K8S_MASTER_IP.stdout }}"

    - name: Display all variables/facts known for a host
      debug:
        var: hostvars["K8S_TOKEN_HOLDER"]

    - name: get variables
      debug: var=hostvars["K8S_TOKEN_HOLDER"]

    # - name: debug k8s master ip
    #   debug:
    #     msg: "{{ hostvars["K8S_TOKEN_HOLDER"]["master_ip"] }}"

    # - name: debug k8s token
    #   debug:
    #     msg: "{{ hostvars['K8S_TOKEN_HOLDER']['token'] }}"

    # - name:
    #   debug: debug k8s Hash
    #     msg: "{{ hostvars['K8S_TOKEN_HOLDER']['hash'] }}"